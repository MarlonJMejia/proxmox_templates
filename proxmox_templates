#!/usr/bin/env python3

import subprocess
import argparse
import sys
import logging
import os

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)


def create_template(
    vm_id: int,
    vm_name: str,
    vm_vlan: int,
    mem: int,
    cores: int,
    cinit: str,
    iso_file: str,
    ostype: str,
    vm_bridge: str,
):
    """Create a template from ISO.

    Args:
        vm_id (int): Virtual Machine ID
        vm_name (str): Virtual Machine name
        vm_vlan (int): VLAN ID
        mem (int): Memory size in MB
        cores (int): Number of CPU cores
        cinit (str): Cloud-Init configuration file name
        iso_file (str): Path to the ISO file
        ostype (str): Operating system type
    """

    try:
        logging.info("Creating VM with ID %s and name %s", vm_id, vm_name)

        subprocess.check_call(
            [
                "qm",
                "create",
                str(vm_id),
                "--name",
                vm_name,
                "--ostype",
                ostype,
                "--tablet",
                "0",
            ]
        )

        if vm_vlan:
            subprocess.check_call(
                [
                    "qm",
                    "set",
                    str(vm_id),
                    "--net0",
                    f"virtio,bridge={str(vm_bridge)},tag={vm_vlan}",
                    "--memory",
                    str(mem),
                    "--cores",
                    str(cores),
                    "--cpu",
                    "host",
                ]
            )
        else:
            subprocess.check_call(
                [
                    "qm",
                    "set",
                    str(vm_id),
                    "--net0",
                    f"virtio,bridge={str(vm_bridge)}",
                    "--memory",
                    str(mem),
                    "--cores",
                    str(cores),
                    "--cpu",
                    "host",
                ]
            )

        subprocess.check_call(
            [
                "qm",
                "set",
                str(vm_id),
                "--scsi0",
                f"local-lvm:0,import-from={iso_file},discard=on,ssd=1",
            ]
        )
        subprocess.check_call(
            [
                "qm",
                "set",
                str(vm_id),
                "--boot",
                "order=scsi0",
                "--scsihw",
                "virtio-scsi-single",
                "--agent",
                "enabled=1,fstrim_cloned_disks=1",
            ]
        )

        logging.info("Configuring Cloud-Init for VM ID %s", vm_id)
        subprocess.check_call(
            [
                "qm",
                "set",
                str(vm_id),
                "--ide2",
                "local-lvm:cloudinit",
                "--ipconfig0",
                "ip=dhcp",
            ]
        )

        if cinit:
            subprocess.check_call(
                ["qm", "set", str(vm_id), "--cicustom", f"user=local:snippets/{cinit}"]
            )

        subprocess.check_call(["qm", "template", str(vm_id)])

        logging.info("Template creation for VM ID %s completed successfully", vm_id)
    except subprocess.CalledProcessError as e:
        logging.error("An error occurred while creating the template: %s", e)
    except FileNotFoundError as e:
        logging.error("File not found error: %s", e)
    except Exception as e:
        logging.error("An unexpected error occurred: %s", e)


def main():
    parser = argparse.ArgumentParser(
        description="Create a VM template from an ISO file."
    )
    parser.add_argument("--vmid", type=int, required=True, help="Virtual Machine ID")
    parser.add_argument("--name", type=str, required=True, help="Virtual Machine name")
    parser.add_argument(
        "--vlan", type=int, required=False, default=False, help="VLAN ID"
    )
    parser.add_argument(
        "--bridge",
        type=str,
        required=False,
        default="vmbr1",
        help="Virtual Machine Bridge Interface",
    )
    parser.add_argument(
        "--memory", type=int, required=False, default="2046", help="Memory size in MB"
    )
    parser.add_argument(
        "--cores", type=int, required=False, default=2, help="Number of CPU cores"
    )
    parser.add_argument(
        "--cinit",
        type=str,
        required=False,
        default=False,
        help="Cloud-Init configuration file name",
    )
    parser.add_argument("--iso", type=str, required=True, help="Path to the ISO file")
    parser.add_argument(
        "--ostype",
        type=str,
        required=False,
        default="l26",
        help="Operating system type (default: l26)",
    )
    args = parser.parse_args()

    # Pre-checks
    # No spaces in the template name
    if " " in args.name:
        logging.error("VM name contains spaces. Please use a name without spaces.")
        sys.exit()

    # Convert path to full path for the iso
    if not os.path.isabs(args.iso):
        args.iso = os.path.join(os.getcwd(), args.iso)
        logging.info(f"Converted ISO path to absolute path: {args.iso}")

    # Check that the cloud-init file is there
    snippets_dir = "/var/lib/vz/snippets"
    cinit_file = os.path.join(snippets_dir, args.cinit)
    if not os.path.exists(cinit_file):
        logging.error(
            f"The Cloud-Init file '{args.cinit}' does not exist in '{snippets_dir}'."
        )
        sys.exit(1)

    create_template(
        args.vmid,
        args.name,
        args.vlan,
        args.memory,
        args.cores,
        args.cinit,
        args.iso,
        args.ostype,
        args.bridge,
    )


if __name__ == "__main__":
    main()
